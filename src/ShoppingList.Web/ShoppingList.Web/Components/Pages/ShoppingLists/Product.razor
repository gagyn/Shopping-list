@using ShoppingList.Infrastructure.Extensions
@inject NavigationManager Nav
@inject IMediator mediator
@rendermode InteractiveServer

<EditForm Model="@ProductModel" OnSubmit="AddOrUpdateProduct" FormName="@($"ProductForm{ProductModel.Id}")">
    <InputText @bind-Value="ProductModel.Name" placeholder="Podaj nazwę produktu" />
    <InputNumber @bind-Value="ProductModel.Amount" placeholder="Podaj ilość tego produktu" />
    <InputSelect @bind-Value="ProductModel.Unit" placeholder="Wybierz jednostkę">
        @foreach (var (name, description) in EnumExtensions.GetDescriptions<DTO.Models.Unit>())
        {
            <option value="@name">@description</option>
        }
    </InputSelect>
    <InputText @bind-Value="ProductModel.Description" placeholder="Wprowadź opis" />
    @if (ProductModel.Id.HasValue)
    {
        <InputCheckbox @bind-Value="ProductModel.Completed" DisplayName="Czy zakupiono" />
    }
    <button type="submit" class="btn btn-primary">Zapisz</button>
    @if (ProductModel.Id.HasValue)
    {
        <button type="button" class="btn btn-danger" @onclick="RemoveProduct">Usuń</button>
    }
</EditForm>
<div class="message">@message</div>

@code {
    [Parameter] public int? ShoppingListId { get; set; }
    [Parameter] public ProductDetails ProductModel { get; set; }
    [Parameter] public Action<ProductDetails> OnProductRemoval { get; set; } = _ => { };
    [Parameter] public Action<ProductDetails> OnProductCreated { get; set; } = _ => { };

    string? message;

    private async Task AddOrUpdateProduct()
    {
        var productAlreadyExists = ProductModel.Id.HasValue;
        if (productAlreadyExists)
        {
            var command = new UpdateProductCommand(
                ShoppingListId!.Value,
                ProductModel.Id!.Value,
                ProductModel.Name!,
                ProductModel.Description!,
                ProductModel.Amount!.Value,
                ProductModel.Completed,
                ProductModel.Unit);

            await mediator.Send(command);
            ShowMessage("Zmieniono produkt.");
        }
        else
        {
            var command = new AddProductToShoppingListCommand(
                ShoppingListId!.Value,
                ProductModel.Name!, 
                ProductModel.Description!,
                ProductModel.Amount!.Value,
                ProductModel.Unit);

            ProductModel.Id = await mediator.Send(command);
            ShowMessage("Dodano produkt.");
            OnProductCreated(ProductModel);
        }
    }

    private async Task RemoveProduct()
    {
        var command = new RemoveProductCommand(ShoppingListId!.Value, ProductModel.Id!.Value);
        await mediator.Send(command);

        OnProductRemoval(ProductModel);
        ShowMessage("Usunięto produkt.");
    }

    private async void ShowMessage(string message)
    {
        this.message = message;
        await Task.Delay(2000);
        this.message = null;
        this.StateHasChanged();
    }
}
