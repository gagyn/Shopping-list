@using Microsoft.AspNetCore.Antiforgery
@using global::ShoppingList.DTO.Models
@using global::ShoppingList.Web.Components.Models
@inject NavigationManager Nav
@inject IMediator mediator

@page "/shopping-list"
@page "/shopping-list/{ShoppingListId:int}"
@rendermode InteractiveServer
@attribute [StreamRendering]

@if (ShoppingListModel is null)
{
    <p>Ładowanie...</p>
    return;
}

<EditForm Model="@ShoppingListModel" OnSubmit="AddOrUpdateShoppingList" FormName="ShoppingListForm">
    <InputText @bind-Value="ShoppingListModel.Name" placeholder="Wprowadź nazwę nowej listy" />
    <button type="submit">Zapisz</button>
</EditForm>

@if (ShoppingListId is not null)
{
    <div>
        @foreach (var product in ShoppingListModel.Products)
        {
            <EditForm Model="@product" OnSubmit="() => AddOrUpdateProduct(product.Id)" FormName="@($"ProductForm{product.Id}")">
                <InputText @bind-Value="product.Name" placeholder="Podaj nazwę produktu" />
                <InputNumber @bind-Value="product.Amount" placeholder="Podaj ilość tego produktu" />
                <InputText @bind-Value="product.Description" placeholder="Wprowadź opis" />
                @if (product.Id != 0)
                {
                    <InputCheckbox @bind-Value="product.Completed" DisplayName="Czy zakupiono" />
                }
                <button type="submit">Zapisz</button>
            </EditForm>
        }
    </div>
}

@code {
    [Parameter] public int? ShoppingListId { get; set; }
    [SupplyParameterFromForm] private ShoppingListDto? ShoppingListModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ShoppingListId is null)
        {
            ShoppingListModel = new();
        }
        else
        {
            var shoppingList = await mediator.Send(new FindShoppingListQuery(ShoppingListId.Value));
            ShoppingListModel = new(shoppingList);
        }
        ShoppingListModel.Products.Add(new ProductDto());
    }

    private async Task AddOrUpdateProduct(int? productId)
    {
        var product = productId.HasValue
            ? ShoppingListModel!.Products.First(x => x.Id == productId)
            : ShoppingListModel!.Products.Last();

        IRequest command = productId.HasValue
            ? new UpdateProductCommand(ShoppingListModel.Id, productId.Value, product.Name!, product.Description!, product.Amount, product.Completed)
            : new AddProductToShoppingListCommand(ShoppingListModel.Id, product.Name!, product.Description!, product.Amount);

        await mediator.Send(command);
        Nav.Refresh();
    }

    private async Task AddOrUpdateShoppingList()
    {
        if (ShoppingListId is null)
        {
            ShoppingListId = await mediator.Send(new CreateShoppingListCommand(ShoppingListModel!.Name!));
        }
        else
        {
            ShoppingListId = await mediator.Send(new UpdateShoppingListCommand(ShoppingListModel!.Id, ShoppingListModel!.Name!));
        }
    }
}
